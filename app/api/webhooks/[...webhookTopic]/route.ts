/**
 * DO NOT EDIT THIS FILE DIRECTLY
 * Head over to utils/shopify.js to create your webhooks
 *  and write your webhook functions in utils/webhooks.
 * If you don't know the format, use the `createwebhook` snippet when using VSCode
 *  to get a boilerplate function for webhooks.
 * To update this file, run `npm run update:config` or `bun run update:config`
 */

import { NextRequest } from "next/server";
import shopify from "@/utils/shopify.js";
import appUninstallHandler from "@/utils/webhooks/app_uninstalled.js";
import { Readable } from "stream";

async function buffer(readable: ReadableStream) {
  const reader = readable.getReader();
  const chunks = [];

  while (true) {
    const { done, value } = await reader.read();
    if (done) break;
    chunks.push(value);
  }

  return Buffer.concat(chunks);
}

export async function POST(req: NextRequest) {
  const topic = req.headers.get("x-shopify-topic") || "";
  const shop = req.headers.get("x-shopify-shop-domain") || "";
  const apiVersion = req.headers.get("x-shopify-api-version") || "";
  const webhookId = req.headers.get("x-shopify-webhook-id") || "";

  try {
    const buff = await buffer(req.body as ReadableStream);
    const rawBody = buff.toString("utf8");

    const validateWebhook = await shopify.webhooks.validate({
      rawBody: rawBody,
      rawRequest: req,
      rawResponse: new Response(),
    });

    if (!validateWebhook.valid) {
      return new Response(JSON.stringify({ error: true }), { status: 400 });
    }

    //SWITCHCASE
    switch (validateWebhook.topic) {
      case "APP_UNINSTALLED":
        await appUninstallHandler(
          validateWebhook.topic,
          shop,
          rawBody,
          webhookId,
          apiVersion
        );
        break;
      default:
        throw new Error(`Can't find a handler for ${topic}`);
    }
    //SWITCHCASE END

    console.log(`--> Processed ${topic} from ${shop}`);
    return new Response(JSON.stringify({ message: "ok" }), { status: 200 });
  } catch (e) {
    const error = e as Error;
    console.error(
      `---> Error while processing webhooks for ${shop} at ${topic} | ${error.message}`
    );
    return new Response(JSON.stringify({ message: "Error" }), { status: 500 });
  }
}

// Other HTTP methods are not allowed
export async function GET() {
  return new Response("Method not allowed", { status: 405 });
}

export async function PUT() {
  return new Response("Method not allowed", { status: 405 });
}

export async function DELETE() {
  return new Response("Method not allowed", { status: 405 });
}

export async function PATCH() {
  return new Response("Method not allowed", { status: 405 });
}
